name: Build and Push Docker Image
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor}}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend
          file: ./Frontend/Dockerfile
          push: true
          tags: ghcr.io/tunsworthy/baby_organiser_frontend:latest
          platforms: linux/arm64/v8
     
      - name: Build and push Backedn Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Backend_API
          file: ./Backend_API/Dockerfile
          push: true
          tags: ghcr.io/tunsworthy/baby_organiser_backend_api:latest
          platforms: linux/arm64/v8
  Deploy:
      needs: build-and-push
      environment: Test
      runs-on: [self-hosted,Production]
      steps:
        - name: Clone Repo or Update
          run: |
            cd ~/Docker-Compose
            if [ -d "baby_organiser/.git" ]; then
              echo "Repository already exists. Pulling latest changes..."
              cd baby_organiser
              git pull
            else
              echo "Cloning repository..."
              git clone -n --depth=1 --filter=tree:0 \
                https://github.com/Tunsworthy/baby_organiser.git
              cd baby_organiser
            fi
        
            git sparse-checkout set --no-cone /Baby_Organsier
            git checkout
        - name: Start Services with Docker Compose
          run: |
            cd ~/Docker-Compose/baby_organiser/Baby_Organsier
            # Check if .env exists and remove it
            [ -f .env ] && rm .env

            echo "githubuser=${{ github.actor}}" >> .env
            echo "MONGO_URI=${{ vars.MONGO_URI }}" >> .env
            echo "POSTGRES_URI=${{ vars.POSTGRES_URI }}" >> .env 
            echo "PORT=${{ vars.PORT }}" >> .env
            echo "SERVER=${{ vars.SERVER }}" >> .env
            echo "BABY_NGINX_IP=${{vars.BABY_NGINX_IP }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
        
            docker-compose up -d
  Verify-containers:
    needs: [build-and-push,Deploy]
    runs-on: [self-hosted,Production]
    steps:
      - name: Check Continers
        run: |
          - echo "Checking running containers from the current Docker Compose file..."
          # Navigate to the directory with your docker-compose.yml
          - cd ~/Docker-Compose/baby_organiser/Baby_Organsier  
          # Get a list of expected services from docker-compose.yml
          - EXPECTED_CONTAINERS=$(docker-compose config --services)
          # Get a list of currently running services
          - RUNNING_CONTAINERS=$(docker-compose ps --services --filter "status=running")
          # Fail if any expected container is missing
          - |
            for container in $EXPECTED_CONTAINERS; do
              if ! echo "$RUNNING_CONTAINERS" | grep -q "^$container$"; then
                echo "❌ Expected container $container is NOT running!"
                exit 1
              fi
            done
      
          # Check health status of each running container
          - |
            for container in $RUNNING_CONTAINERS; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$(docker compose ps -q $container)" 2>/dev/null || echo "no-healthcheck")
              if [ "$HEALTH_STATUS" = "unhealthy" ]; then
                echo "❌ Container $container is unhealthy!"
                exit 1
              elif [ "$HEALTH_STATUS" = "no-healthcheck" ]; then
                echo "⚠️ Container $container does not have a health check. Skipping..."
              else
                echo "✅ Container $container is healthy."
              fi
            done
      
          - echo "✅ All expected containers are running and healthy!"

