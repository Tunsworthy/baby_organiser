name: Build and Push Docker Image
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor}}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend
          file: ./Frontend/Dockerfile
          push: true
          tags: ghcr.io/tunsworthy/baby_organiser_frontend:latest
          platforms: linux/arm64/v8
     
      - name: Build and push Backedn Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Backend_API
          file: ./Backend_API/Dockerfile
          push: true
          tags: ghcr.io/tunsworthy/baby_organiser_backend_api:latest
          platforms: linux/arm64/v8
  Deploy:
      needs: build-and-push
      environment: Test
      runs-on: [self-hosted,Production]
      steps:
        - name: Clone Repo or Update
          run: |
            cd ~/Docker-Compose
            if [ -d "baby_organiser/.git" ]; then
              echo "Repository already exists. Pulling latest changes..."
              cd baby_organiser
              git pull
            else
              echo "Cloning repository..."
              git clone -n --depth=1 --filter=tree:0 \
                https://github.com/Tunsworthy/baby_organiser.git
              cd baby_organiser
            fi
        
            git sparse-checkout set --no-cone /Baby_Organsier
            git checkout
        - name: Start Services with Docker Compose
          run: |
            cd ~/Docker-Compose/baby_organiser/Baby_Organsier
            # Check if .env exists and remove it
            [ -f .env ] && rm .env

            echo "githubuser=${{ github.actor}}" >> .env
            echo "MONGO_URI=${{ vars.MONGO_URI }}" >> .env
            echo "POSTGRES_URI=${{ vars.POSTGRES_URI }}" >> .env 
            echo "PORT=${{ vars.PORT }}" >> .env
            echo "SERVER=${{ vars.SERVER }}" >> .env
            echo "BABY_NGINX_IP=${{vars.BABY_NGINX_IP }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
        
            docker-compose up -d
  verify-containers:
    needs: Deploy
    runs-on: [self-hosted,Production]
    steps:
      - name: Navigate to Deployment Directory
        run: cd ~/Docker-Compose/baby_organiser/Baby_Organsier

      - name: List Expected Services
        id: expected
        run: |
          echo "Getting expected services from docker-compose.yml..."
          EXPECTED_CONTAINERS=$(docker compose config --services)
          echo "EXPECTED_CONTAINERS=${EXPECTED_CONTAINERS}" >> $GITHUB_ENV

      - name: List Running Services
        id: running
        run: |
          echo "Getting currently running services..."
          RUNNING_CONTAINERS=$(docker compose ps --services --filter "status=running")
          echo "RUNNING_CONTAINERS=${RUNNING_CONTAINERS}" >> $GITHUB_ENV

      - name: Verify All Expected Containers Are Running
        run: |
          for container in $EXPECTED_CONTAINERS; do
            if ! echo "$RUNNING_CONTAINERS" | grep -q "^$container$"; then
              echo "❌ Expected container $container is NOT running!"
              exit 1
            fi
          done
          echo "✅ All expected containers are running."

      - name: Check Container Health Status
        run: |
          for container in $RUNNING_CONTAINERS; do
            CONTAINER_ID=$(docker compose ps -q $container)
            if [ -z "$CONTAINER_ID" ]; then
              echo "⚠️ Could not find container ID for $container. Skipping..."
              continue
            fi

            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER_ID" 2>/dev/null || echo "no-healthcheck")

            if [ "$HEALTH_STATUS" = "unhealthy" ]; then
              echo "❌ Container $container is unhealthy!"
              exit 1
            elif [ "$HEALTH_STATUS" = "no-healthcheck" ]; then
              echo "⚠️ Container $container does not have a health check. Skipping..."
            else
              echo "✅ Container $container is healthy."
            fi
          done

      - name: Success Message
        run: echo "✅ All expected containers are running and healthy!"
          - echo "✅ All expected containers are running and healthy!"

